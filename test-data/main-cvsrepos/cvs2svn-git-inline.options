# (Be in -*- mode: python; coding: utf-8 -*- mode.)

# This is an example of an options file that can be used to make
# cvs2svn convert to git rather than to Subversion.  See
# www/cvs2svn.html for general information, and see the comments in
# this file and in cvs2svn-example.options for information about what
# options are available and how they can be set.

# "cvs2git" is shorthand for "cvs2svn in the mode where it is
# outputting to git instead of Subversion".  But the program that
# needs to be run is still called "cvs2svn".  Run it with the
# --options option, passing it this file as argument:
#
#     cvs2svn --options=cvs2svn-git.options

# Many options are shared with Subversion, so we simply import the
# sample Subversion options file (from the current directory, which
# should be the main cvs2svn directory)...
execfile('cvs2svn-example.options')

# ...and then we overwrite the things that need to be different.

from cvs2svn_lib.git_revision_recorder import GitRevisionRecorder
from cvs2svn_lib.git_output_option import GitRevisionInlineWriter
from cvs2svn_lib.git_output_option import GitOutputOption


# Set this option to True to convert only the main branch of the CVS
# repository:
ctx.trunk_only = False

# cvs2git only supports single-project conversions (multiple-project
# conversions wouldn't really make sense for git anyway).  So these
# options must both be set to False:
ctx.cross_project_commits = False
ctx.cross_branch_commits = False

# Specify a username to be used for commits for which CVS doesn't
# record the original author (for example, the creation of a branch).
# This should be a simple (unix-style) username, but it can be
# translated into a git-style name by the author_transforms map.
ctx.username = 'cvs2svn'

# CVS uses unix login names as author names whereas git requires
# author names to be of the form "foo <bar>".  The default is to set
# the git author to "cvsauthor <cvsauthor>".  author_transforms can be
# used to map cvsauthor names (e.g., "jrandom") to a true name and
# email address (e.g., "J. Random <jrandom@example.com>" for the
# example shown).  All values should be either 16-bit strings (i.e.,
# with "u" as a prefix) or 8-bit strings in the utf-8 encoding.
# Please substitute your own project's usernames here to use with the
# author_transforms option of GitOutputOption below.
author_transforms={
    'jrandom' : ('J. Random', 'jrandom@example.com'),
    'mhagger' : ('Michael Haggerty', 'mhagger@alum.mit.edu'),
    'brane' : (u'Branko Čibej', 'brane@xbc.nu'),
    'ringstrom' : ('Tobias Ringström', 'tobias@ringstrom.mine.nu'),
    'dionisos' : (u'Erik Hülsmann', 'e.huelsmann@gmx.net'),

    # This one will be used for commits for which CVS doesn't record
    # the original author, as explained above.
    'cvs2svn' : ('cvs2svn', 'admin@example.com'),
    }

# This is the main option that causes cvs2svn to output to git rather
# than Subversion:
ctx.output_option = GitOutputOption(
    # The file in which to write the git-fast-import stream that
    # contains the changesets and branch/tag information:
    'cvs2svn-tmp/git-dump.dat',

    # Write the file contents inline in the git-fast-import stream,
    # rather than using a separate blobs file.  This makes the stream
    # file much larger.
    revision_writer=GitRevisionInlineWriter(
        # cvs2git uses either RCS's "co" command or CVS's "cvs co -p" to
        # extract the content of file revisions.  Here you can choose
        # whether to use RCS (faster, but fails in some rare
        # circumstances) or CVS (much slower, but more reliable).
        #RCSRevisionReader(co_executable=r'co')
        CVSRevisionReader(cvs_executable=r'cvs')
        ),

    # This option can be set to an integer to limit the number of
    # revisions that are merged with the main parent in any commit.
    # For git output, this can be set to None (unlimited), though due
    # to the limitations of other tools you might want to set it to a
    # smaller number (e.g., 16).  For Mercurial output, this should be
    # set to 1.
    #max_merges=None,
    max_merges=1,

    # Optional map from CVS author names to git author names:
    author_transforms=author_transforms,
    )

# During CollectRevsPass, cvs2git records the contents of file
# revisions into a file in git-fast-import format.  This option
# configures that process:
ctx.revision_recorder = NullRevisionRecorder()

# cvs2git does not need to know what revisions will be excluded, so
# leave this option unchanged:
ctx.revision_excluder = NullRevisionExcluder()

# cvs2git's revision reader is set via the GitOutputOption
# constructor, so leave this option set to None.
ctx.revision_reader = None

# Clear the default project that was set in cvs2svn-example.options:
run_options.clear_projects()

# Now add a project to be converted to git:
run_options.add_project(
    # The path to the part of the CVS repository (*not* a CVS working
    # copy) that should be converted.  This may be a subdirectory
    # (i.e., a module) within a larger CVS repository.
    r'test-data/main-cvsrepos',

    # See cvs2svn-example.options for more documention about symbol
    # transforms that can be set using this option.
    symbol_transforms=[
        ReplaceSubstringsSymbolTransform('\\','/'),
        NormalizePathsSymbolTransform(),
        ],

    # See www/cvs2svn.html and cvs2svn-example.options for more
    # documention about symbol strategy rules.  The settings below
    # will give pretty much a 1:1 conversion, but you can change the
    # settings for more customization (for example, excluding a symbol
    # from the conversion, forcing it to be output as a branch
    # vs. tag, changing its name, etc).
    symbol_strategy_rules=[
        # Read from a file how symbols should be converted:
        #SymbolHintsFileRule('symbol-hints.txt'),

        # Specific rules for symbols matching particular regexps:
        #ForceBranchRegexpStrategyRule(r'branch.*'),
        #ForceTagRegexpStrategyRule(r'tag.*'),
        #ExcludeRegexpStrategyRule(r'unknown-.*'),

        # If a symbol is used consistently in CVS, do the same in git:
        UnambiguousUsageRule(),

        # If there are ever commits on a symbol, force it to be a
        # branch:
        BranchIfCommitsRule(),

        # Uncomment at most one of the following group of
        # "catch-all" rules:
        HeuristicStrategyRule(),
        #AllBranchRule(),
        #AllTagRule(),

        # This rule should always be included.  It determines from
        # which parent branch each daughter branch/tag sprouts.
        HeuristicPreferredParentRule(),
        ],
    )

